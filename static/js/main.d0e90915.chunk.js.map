{"version":3,"sources":["Components/Card.jsx","Components/Cardlist.jsx","Components/SearchBox.jsx","Components/Scroll.jsx","container/App.jsx","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchChange","onChange","type","placeholder","Scroll","props","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAgBeA,G,YAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,yBAAKC,UAAU,aACf,yBAAKA,UAAU,UAAUC,IAAI,UAAUC,IAAG,+BAA0BH,EAA1B,cACtC,6BACI,4BAAKF,GACL,2BAAIC,OCNL,SAASK,EAAT,GAA6B,IAAVC,EAAS,EAATA,OAC9B,OACI,yBAAKJ,UAAW,kBAERI,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLV,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,MACjBC,GAAIK,EAAOG,GAAGR,S,MCVnB,SAASU,EAAT,GAAsC,IAAjBC,EAAgB,EAAhBA,aAChC,OACI,6BACI,yBAAKV,UAAU,oBACX,2BAAOA,UAAU,cAAcW,SAAUD,EAAcE,KAAK,SAASf,KAAK,YAAYgB,YAAY,aCNnG,SAASC,EAAOC,GAC3B,OACI,yBAAKf,UAAU,aACNe,EAAMC,U,ICuCRC,E,YApCX,aAAe,IAAD,8BACV,+CAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzC,EAAKC,MAAQ,CACTpB,OAAQ,GACRiB,YAAa,IAJP,E,iFAQO,IAAD,OACZI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAChB,OAAQyB,S,+BAOpC,IAAD,EACyBC,KAAKN,MAA5BpB,EADF,EACEA,OAAQiB,EADV,EACUA,YACTU,EAAiB3B,EAAO4B,QAAQ,SAAAC,GAClC,OAAOA,EAAMpC,KAAKqC,cAAcC,SAASd,EAAYa,kBAEzD,OAAS9B,EAAOgC,OAEhB,6BACI,wBAAIpC,UAAU,gBAAd,eACA,kBAAC,EAAD,CAAWU,aAAcoB,KAAKZ,iBAC9B,6BACA,kBAACJ,EAAD,KACI,kBAACX,EAAD,CAAUC,OAAQ2B,MAN1B,8C,GAzBUM,a,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.d0e90915.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return(\r\n        <div className='card zoom'>\r\n        <img className='robopic' alt='robopic' src={`https://robohash.org/${id}?200*200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\n\r\nimport Card from './Card'\r\n\r\nexport default function Cardlist({robots}) {\r\n    return (\r\n        <div className= 'container-flex'>\r\n            {\r\n                robots.map((user, i) => {\r\n                return ( \r\n                    <Card \r\n                    key={i} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email} \r\n                    id={robots[i].id} \r\n                    />\r\n                )})\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport './SearchBox.css'\r\n\r\nexport default function SearchBox({ searchChange }) {\r\n    return (\r\n        <div>\r\n            <div className='search-container'>\r\n                <input className='search-robo' onChange={searchChange} type='search' name='SearchBox' placeholder='search'></input>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Scroll(props) {\r\n    return (\r\n        <div className='scrollbar'>\r\n                {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react'\r\n\r\nimport './App.css'\r\nimport Cardlist from '../Components/Cardlist'\r\nimport SearchBox from '../Components/SearchBox'\r\nimport Scroll from '../Components/Scroll'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n            fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots: users}))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const {robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        return (!robots.length) ? \r\n        <h1>Loading...</h1> :\r\n        <div>\r\n            <h1 className='main-heading'>ROBOFRIENDS</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <hr/>\r\n            <Scroll>\r\n                <Cardlist robots={filteredRobots} />\r\n            </Scroll>\r\n        </div>\r\n        }\r\n    }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './container/App';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}